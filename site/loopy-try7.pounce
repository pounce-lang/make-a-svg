[[0 10][2 1 3 1 1 -4]]
  [[0 25][5 1 -1 -3 1 -2]]
  [[0 -20][1 2 1 2 1 -5]]
  [[0 10][3 -1 -1 1 1 -4]]
  [[0 -10][2 3 -1 -1 -2 -4]]
  [[0 5][4 1 1 -3 -3 -1]]
  [[0 10][1 1 3 -3 -2 -1]]
  [[0 -20][2 3 2 -1 -1 -5]]
  [[0 10][5 -1 1 2 -3 -3]]


stack-copy [[drop] dip] depth 2 - times [dup] map drop

# based on the depth try to fine columns and rows
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
depth sqrt dup floor - 0 > 
[depth dup dup sqrt floor / dup [/] dip swap]
[sqrt dup ] if-else

# 60 is no good but 63 is 9x7
[[d][d sqrt dup floor - 0 > 
[d dup dup sqrt floor / dup [/] dip swap]
[d sqrt dup ] if-else] pounce [] cons cons] [cr] compose
1 cr 2 cr 3 cr 4 cr 5 cr 60 cr 63 cr 

#leap in then out
[[] [cons] depth 2 - times] [unleap] compose
[[depth] [[leap] depth times [unleap] depth times] pounce] [leapdown] compose
[[1 1 + 4 4 * 5]] 2 leapdown

# leap in and in then out and out
[[] [cons] depth 2 - times] [unleap] compose
[[[3 4 +][4 5 +]]] [[leap] map] map [[unleap] map] map
#>[[[7] [9]]]

##find a loopy using Pounce
#[0 [0 0 0 0] [[3 1][1 -1][1 -1][-1 -3]]] 
#[0 [0 0 0 0 0 0] [[3 5 1][-1 1 3][-1 1 3][-3 -1 1][-3 -1 1][-5 -3 -1]]] 
#[0 [0 0 0 0 0 0 0 0] [[3 5 7 1][-1 1 3 5][-1 1 3 5][-3 -1 1 3]
#[-3 -1 1 3][-5 -3 -1 1][-5 -3 -1 1][-7 -5 -3 -1]]] 
#[0 [0 0 0 0 0 0 0 0] 
#[[3 5 7 1][-1 1 3 5][-1 1 3 5][3 -1 1 -3]
#[-3 -1 1 3][-5 -3 -1 1][-5 -3 -1 1][-7 -5 -3 -1]]] 
[0 [0 0 0 0 0 0 0 0 0 0] 
[[7 5 3 1 9]
[7 5 3 1 -1][7 5 3 1 -1]
[5 3 1 -1 -3][5 3 1 -1 -3]
[3 1 -1 -3 -5][3 1 -1 -3 -5]
[1 -1 -3 -5 -7][1 -1 -3 -5 -7]
[-9 -7 -5 -3 -1]]]

[[[i choi pos]] [[i choi pos] choi false [0 == ||] reduce ! i 0 == &&] pounce][done?]compose

[[[i choi pos]] [[i choi pos] i choi swap outAt swap drop 0 ==] pounce]
[possible?]compose

[[[i choi pos]] [pop drop pos push] pounce]
[erase]compose

[[[i choi pos]] [[i choi pos] pos i outAt
uncons swap i swap [inAt] dip
i swap dup [+] dip
choi swap i inAt [] cons cons swap push  
] pounce]
[do-move]compose

[done?][][do-move done? [possible?] dip || [][erase] if-else][] linrec